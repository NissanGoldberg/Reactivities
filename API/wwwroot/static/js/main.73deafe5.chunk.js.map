{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/models/activity.ts","app/common/form/TextInput.tsx","app/common/form/TextAreaInput.tsx","app/common/form/DateInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/user/DemoForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","list","details","id","create","activity","update","attend","unattend","current","login","user","register","username","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","groupActivitiesByDate","Array","from","values","Map","action","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","info","stop","err","computed","loadingInitial","agent","forEach","userStore","set","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","reaction","setItem","removeItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","profile","loadingProfile","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityListItemAttendees","List","horizontal","map","key","Popup","trigger","size","circular","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","LoadingComponent","Dimmer","active","Loader","loadActivities","useEffect","Grid","Column","width","ActivityFormValues","init","category","time","assign","TextInput","input","type","placeholder","meta","touched","Form","Field","TextAreaInput","rows","DateInput","value","onChange","onBlur","onKeyDown","e","preventDefault","SelectInput","options","Select","validate","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","useState","setLoading","setActivity","params","finally","onSubmit","dateAndTime","timeString","getHours","getMinutes","year","getFullYear","month","getMonth","day","getDate","dateString","combineDateAndTime","newActivity","uuid","initialValues","render","handleSubmit","invalid","pristine","component","widths","disabled","ErrorMessage","Message","statusText","keys","length","flat","i","email","password","LoginForm","FORM_ERROR","submitError","dirtySinceLastSubmit","textAlign","fluid","RegisterForm","DemoForm","defaultValue","HomePage","isLoggedIn","openModal","vertical","className","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","attached","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","Statistic","label","Divider","Reveal","animated","visible","hidden","Tab","Pane","Card","itemsPerRow","photos","photo","panes","menuItem","ProfileContent","menu","menuPosition","activeIndex","loadProfile","withRouter","location","setAppLoaded","getUser","path","marginTop","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73deafe5.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\nimport {IActivity} from \"../models/activity\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport {history} from \"../..\";\r\nimport {toast} from \"react-toastify\";\r\nimport {IUser, IUserFormValues} from \"../models/user\";\r\nimport {IProfile} from \"../models/profile\";\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    if( error.message === 'Network Error' && !error.response){\r\n        toast.error(\"Network error - make sure you're connected\")\r\n    }\r\n    const {status, data, config} = error.response;\r\n    if(status === 404) {\r\n        history.push('/notfound');\r\n    }\r\n    if (status === 400 && config.method ==='get' && data.errors.hasOwnProperty('id')){\r\n        history.push('/notfound');\r\n    }\r\n    if(status === 500) {\r\n        toast.error('Server error - check the terminal for more info!');\r\n    }\r\n    throw error.response;\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\n//adding sleep for testing web app\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\n//TODO remove: then(sleep(1_000))   in production\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post('/activities', activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`),\r\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\r\n};\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFormValues) : Promise<IUser> => requests.post(`/user/login`, user),\r\n    register: (user: IUserFormValues) : Promise<IUser> => requests.post(`/user/register`, user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string): Promise<IProfile> => requests.get(`/profiles/${username}`)\r\n}\r\n\r\nexport default {\r\n    Activities,\r\n    User,\r\n    Profiles\r\n}","import {IActivity, IAttendee} from \"../../models/activity\";\r\nimport {IUser} from \"../../models/user\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\r\n\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dateString = `${year}-${month}-${day}`;\r\n\r\n    return new Date(dateString + ' ' + timeString);\r\n}\r\n\r\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\r\n    activity.date = new Date(activity.date);\r\n    activity.isGoing = activity.attendees.some(\r\n        a => a.username === user.username\r\n    );\r\n\r\n    activity.isHost = activity.attendees.some(\r\n        a => a.username === user.username && a.isHost\r\n    );\r\n    return activity;\r\n}\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.username,\r\n        image: user.image!\r\n    }\r\n}","import {action, observable, computed, runInAction} from \"mobx\";\r\nimport {SyntheticEvent} from \"react\";\r\nimport {IActivity} from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport { history } from '../..';\r\nimport {toast} from \"react-toastify\";\r\nimport {RootStore} from \"./rootStore\";\r\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\n\r\n\r\nexport default class ActivityStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n    \r\n    @observable activityRegistry = new Map();\r\n    @observable activity: IActivity | null = null;\r\n    @observable loadingInitial = false;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n    @observable loading = false;\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    @action createHubConnection = (activityId: string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl('http://localhost:5000/chat', {\r\n                accessTokenFactory: () => this.rootStore.commonStore.token!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n        this.hubConnection\r\n            .start()\r\n            .then(() => console.log(this.hubConnection!.state))\r\n            .then(() => {\r\n                console.log(\"Attempting to join group\");\r\n                this.hubConnection!.invoke('AddToGroup', activityId)\r\n            })\r\n            .catch(error => console.log('Error establishing connection: ', error));\r\n\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            runInAction(() => {\r\n                this.activity!.comments.push(comment)\r\n            })\r\n        })\r\n\r\n        this.hubConnection.on('Send', message => {\r\n            toast.info(message);\r\n        })\r\n    };\r\n\r\n    @action stopHubConnection = () => {\r\n        this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\r\n            .then(()=> {\r\n                this.hubConnection!.stop()\r\n            })\r\n            .then(() => console.log('Connection stopped'))\r\n            .catch(err => console.log(err));\r\n        this.hubConnection!.stop()\r\n    }\r\n\r\n    @action addComment = async (values: any) => {\r\n        values.activityId = this.activity!.id;\r\n        try {\r\n            await this.hubConnection!.invoke('SendComment', values)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    @computed get activitiesByDate() {\r\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\r\n    }\r\n    \r\n    groupActivitiesByDate(activities: IActivity[]) {\r\n        const sortedActivities = activities.sort(\r\n            (a, b) => a.date.getTime() - b.date.getTime()\r\n        )\r\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\r\n            const date = activity.date.toISOString().split('T')[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n        },{} as {[key: string]: IActivity[]}));\r\n    }\r\n    \r\n    @action loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        \r\n        try {\r\n            const activities = await agent.Activities.list();\r\n            runInAction('loading activities',() => {\r\n                activities.forEach(activity => {\r\n                    setActivityProps(activity, this.rootStore.userStore.user!)\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n                this.loadingInitial = false;\r\n            });\r\n        }catch (error) {\r\n            runInAction('load activities error',() => this.loadingInitial = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        \r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const attendee = createAttendee(this.rootStore.userStore.user!);\r\n            attendee.isHost = true;\r\n            let attendees = [];\r\n            attendees.push(attendee);\r\n            activity.attendees = attendees;\r\n            activity.comments = [];\r\n            activity.isHost = true;\r\n            \r\n            runInAction('creating activity',() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction('creating activity error',() => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        \r\n        if (activity) {\r\n            this.activity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction('getting activity', () => {\r\n                    setActivityProps(activity, this.rootStore.userStore.user!)\r\n                    this.activity = activity;\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                    this.loadingInitial = false;\r\n                });\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction('get activity error', () => {\r\n                    this.loadingInitial = false;\r\n                });\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    @action clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n    \r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    } \r\n\r\n    @action editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n\r\n        try {\r\n            await  agent.Activities.update(activity);\r\n            runInAction('editing activity',() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction('edit activity error',() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action cancelSelectedActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        \r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction('deleting activity',() => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        }catch (error) {\r\n            runInAction('deleting activity',() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action attendActivity = async () => {\r\n        const attendee = createAttendee(this.rootStore.userStore.user!);\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees.push(attendee);\r\n                    this.activity.isGoing = true;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            toast.error('Problem signing up to activity');\r\n        }\r\n    };\r\n\r\n    @action cancelAttendance = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.unattend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees = this.activity.attendees.filter(\r\n                        a => a.username !== this.rootStore.userStore.user!.username\r\n                    );\r\n                    this.activity.isGoing = false;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            toast.error('Problem cancelling attendance');\r\n        }\r\n    };\r\n}\r\n\r\n// export default createContext(new ActivityStore());","import { observable, computed, action, runInAction } from 'mobx';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { RootStore } from './rootStore';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable user: IUser | null = null;\r\n\r\n  @computed get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  @action login = async (values: IUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.login(values);\r\n      runInAction(() => {\r\n        this.user = user;\r\n      });\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      // this.rootStore.modalStore.closeModal();\r\n      history.push('/activities'); //TODO won't redirect\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  @action register = async (values: IUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.register(values);\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.rootStore.modalStore.closeModal();\r\n      history.push('/activities')\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await agent.User.current();\r\n      runInAction(() => {\r\n        this.user = user;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action logout = () => {\r\n    this.rootStore.commonStore.setToken(null);\r\n    this.user = null;\r\n    history.push('/');\r\n  };\r\n}\r\n","import {RootStore} from './rootStore';\r\nimport { observable, action, reaction } from 'mobx';\r\n\r\nexport default class CommonStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n    \r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import {RootStore} from './rootStore';\r\nimport { observable, action, runInAction, computed } from 'mobx';\r\nimport { IProfile, IPhoto } from '../models/profile';\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class ProfileStore {\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable profile: IProfile | null = null;\r\n    @observable loadingProfile = true;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.username === this.profile.username\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @action loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    \r\n    // @action uploadPhoto = async (file: Blob) => {\r\n    // }\r\n\r\n    // @action setMainPhoto = async (photo: IPhoto) => {\r\n    // }\r\n    //\r\n    // @action deletePhoto = async (photo: IPhoto) => {\r\n    // }\r\n}","import ActivityStore from './activityStore';\r\nimport UserStore from './userStore';\r\nimport { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\n// import CommonStore from './commonStore';\r\n// import ModalStore from './modalStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore {\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new ActivityStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, {useContext} from \"react\";\r\nimport {Button, Container, Menu, Dropdown, Image} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\ninterface IProps {\r\n    openCreateForm: () => void;\r\n}\r\nconst NavBar: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {logout, user} = rootStore.userStore;\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n                <Menu.Item header as={NavLink} exact to='/'>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px' }}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item  name='Activities' as={NavLink} to='/activities'/>\r\n                <Menu.Item >\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                {user && (\r\n                    <Menu.Item position='right'>\r\n                        <Image avatar spaced='right' src={user.image || '/assets/user.png'} />\r\n                        <Dropdown pointing='top left' text={user.displayName}>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item\r\n                                    as={Link}\r\n                                    to={`/profile/${user.username}`}\r\n                                    text='My profile'\r\n                                    icon='user'\r\n                                />\r\n                                <Dropdown.Item  onClick={logout} text='Logout' icon='power' />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                )}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default observer(NavBar)","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IAttendee } from '../../../app/models/activity';\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map(attendee => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.displayName}\r\n            trigger={\r\n              <Image\r\n                size='mini'\r\n                circular\r\n                src={attendee.image || '/assets/user.png'}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ActivityListItemAttendees;\r\n","import React from \"react\";\r\nimport {Button, Icon, Item, Label, Segment} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IActivity} from \"../../../app/models/activity\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\r\n// import {act} from \"react-dom/test-utils\";\r\n\r\nconst ActivityListItem: React.FC<{activity: IActivity}> = ({activity}) => {\r\n    // const activityStore = useContext(ActivityStore);\r\n    // const {deleteActivity, submitting, target} = activityStore;\r\n    const host = activity.attendees.filter(x => x.isHost)[0];\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src={host.image || '/assets/user.png'} style={{marginBottom: 3}}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profile/${host.username}`}>{host.displayName}</Link>\r\n                            </Item.Description>\r\n                            { \r\n                                activity.isHost &&\r\n                                <Item.Description>\r\n                                    <Label basic color='orange' content='You are hosting this activity'/>\r\n                                </Item.Description>\r\n                            }\r\n                            {\r\n                                activity.isGoing && !activity.isHost &&\r\n                                <Item.Description>\r\n                                    <Label basic color='green' content='You are going to this activity'/>\r\n                                </Item.Description>\r\n                            }\r\n                            \r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock' /> {format(activity.date, 'h:mm a')}\r\n                <Icon name='marker' /> {activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attendees will go here\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendees attendees={activity.attendees} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link} to={`/activities/${activity.id}`}\r\n                    floated='right'\r\n                    content='View'\r\n                    color='blue'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItem)","import React, {useContext, Fragment} from \"react\";\r\nimport {Item, Label} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport {format} from 'date-fns';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {activitiesByDate} = rootStore.activityStore;\r\n    return (\r\n        <Fragment >\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                <Label key={group} size='large' color='blue'>{format(group, 'eeee do MMMM YYYY')} </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />))}\r\n\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList)","import React from \"react\";\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean, content?: string }> = ({inverted=true, content}) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent","import React, {useContext, useEffect} from \"react\";\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {loadActivities, loadingInitial} = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, [loadActivities]);\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n               <h2>Activity filters</h2>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard)","export interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n}\r\n\r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n    time?: Date\r\n}\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string ='';\r\n    description: string ='';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string ='';\r\n    venue: string ='';\r\n    \r\n    constructor(init?: IActivityFormValues) {\r\n        if (init && init.date) {\r\n            init.time = init.date;\r\n        }\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport interface IAttendee {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n}\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, any>, FormFieldProps {}\r\n\r\nconst TextInput: React.FC<IProps> = ({  input,\r\n                                         width,\r\n                                         type,\r\n                                         placeholder,\r\n                                         meta: { touched, error }\r\n                                     }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} type={type} width={width}>\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps\r\n  extends FieldRenderProps<string, any>,\r\n    FormFieldProps {}\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  placeholder,\r\n  meta: { touched, error }\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <textarea rows={rows} {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextAreaInput;\r\n","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport {DateTimePicker} from 'react-widgets';\r\n\r\n//TODO: fix any\r\ninterface IProps\r\n  extends FieldRenderProps<Date, any>,\r\n    FormFieldProps {}\r\n//TODO fix ...rest\r\nconst DateInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    placeholder,\r\n    date = false,\r\n    time = false,\r\n    meta: touched, \r\n    error, \r\n    ...rest\r\n  }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <DateTimePicker \r\n            placeholder={placeholder}\r\n            value={input.value || null}\r\n            onChange={input.onChange}\r\n            onBlur={input.onBlur}\r\n            onKeyDown={(e) => e.preventDefault()}\r\n            date={date}\r\n            time={time}\r\n            //{...rest}\r\n        />\r\n        {touched && error && (\r\n          <Label basic color='red'>\r\n            {error}\r\n          </Label>\r\n        )}\r\n      </Form.Field>\r\n    )\r\n}\r\n\r\nexport default DateInput\r\n","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\r\n\r\n//TODO: fix any\r\ninterface IProps\r\n  extends FieldRenderProps<string, any>,\r\n    FormFieldProps {}\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    options,\r\n    placeholder,\r\n    meta: { touched, error }\r\n  }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <Select \r\n            value={input.value}\r\n            onChange={(e, data) => input.onChange(data.value)}\r\n            placeholder={placeholder}\r\n            options={options}\r\n        />\r\n        {touched && error && (\r\n          <Label basic color='red'>\r\n            {error}\r\n          </Label>\r\n        )}\r\n      </Form.Field>\r\n    )\r\n}\r\n\r\nexport default SelectInput\r\n","export const category = [\r\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n  { key: 'culture', text: 'Culture', value: 'culture' },\r\n  { key: 'film', text: 'Film', value: 'film' },\r\n  { key: 'food', text: 'Food', value: 'food' },\r\n  { key: 'music', text: 'Music', value: 'music' },\r\n  { key: 'travel', text: 'Travel', value: 'travel' }\r\n];","import React, {useContext, useEffect, useState} from 'react'\r\nimport {Button, Form, Grid, Segment} from 'semantic-ui-react'\r\nimport {ActivityFormValues} from \"../../../app/models/activity\";\r\nimport {v4 as uuid} from \"uuid\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Form as FinalForm, Field} from 'react-final-form'\r\nimport TextInput from \"../../../app/common/form/TextInput\";\r\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\r\nimport DateInput from \"../../../app/common/form/DateInput\";\r\nimport SelectInput from \"../../../app/common/form/SelectInput\";\r\nimport {category} from \"../../../app/common/options/categoryOptions\";\r\nimport {combineDateAndTime} from \"../../../app/common/util/util\";\r\n// import {Simulate} from \"react-dom/test-utils\";\r\n// import load = Simulate.load;\r\nimport {\r\n    combineValidators,\r\n    isRequired,\r\n    composeValidators,\r\n    hasLengthGreaterThan\r\n} from 'revalidate';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({ message: 'The event title is required' }),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({\r\n            message: 'Description needs to be at least 5 characters'\r\n        })\r\n    )(),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time')\r\n});\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({match, history}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {createActivity, editActivity, submitting, loadActivity} = rootStore.activityStore;\r\n    const [loading, setLoading] = useState(false);\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if ( match.params.id) {\r\n            setLoading(true);\r\n            loadActivity(match.params.id).then(\r\n                (activity) =>  setActivity(new ActivityFormValues(activity))\r\n            ).finally(() => setLoading(false));\r\n        }\r\n    }, [loadActivity, match.params.id]);\r\n    \r\n    const handleFinalFormSubmit = (values: any) => {\r\n        const dateAndTime = combineDateAndTime(values.date, values.time);\r\n        const {date, time, ...activity} = values;\r\n        activity.date = dateAndTime;\r\n        \r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity);\r\n        }else {\r\n            editActivity(activity);\r\n        }\r\n    };\r\n    \r\n    // const handlerInputChange = (event:  FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    //     const { name, value } = event.currentTarget;\r\n    //     setActivity({...activity, [name]: value})\r\n    // }\r\n    \r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm validate={validate} onSubmit={handleFinalFormSubmit} \r\n                               initialValues={activity}\r\n                               render={({handleSubmit, invalid, pristine}) => (\r\n                        <Form onSubmit={handleSubmit} loading={loading}>\r\n                            <Field\r\n                                name='title'\r\n                                placeholder='Title'\r\n                                value={activity.title}\r\n                                component={TextInput}\r\n                            />\r\n                            <Field name='description' placeholder='Description' rows={3} value={activity.description} component={TextAreaInput}/>\r\n                            <Field component={SelectInput} options={category} name='category' placeholder='Category' value={activity.category} />\r\n                            <Form.Group widths='equal'>\r\n                                <Field component={DateInput} name='date' date={true} placeholder='Date' value={activity.date} />\r\n                                <Field component={DateInput}  name='time' time={true} placeholder='Time' value={activity.time} />\r\n                            </Form.Group>\r\n\r\n                            <Field component={TextInput}  name='city'  placeholder='City' value={activity.city}  />\r\n                            <Field component={TextInput}  name='venue' placeholder='Venue' value={activity.venue} />\r\n                            <Button loading={submitting} floated='right' positive type='submit' content='Submit'  disabled={loading || invalid}/>\r\n                            <Button onClick={activity.id ? () => history.push(`/activities/${activity.id}`) : () => history.push('/activities')}\r\n                                    floated='right' type='button' content='Cancel'  disabled={loading}/>\r\n                        </Form>\r\n                    )}>\r\n                    </FinalForm>\r\n                </Segment> \r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityForm)","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  error: AxiosResponse;\r\n  text?: string;\r\n}\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\r\n  return (\r\n    <Message error>\r\n      <Message.Header>{error.statusText}</Message.Header>\r\n      {error.data && Object.keys(error.data.errors).length > 0 && (\r\n        <Message.List>\r\n          {Object.values(error.data.errors).flat().map((err, i) => (\r\n            <Message.Item key={i}>{err}</Message.Item>\r\n          ))}\r\n        </Message.List>\r\n      )}\r\n      {text && <Message.Content content={text} />}\r\n    </Message>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport {Form, Button, Header} from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\n// import ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n  email: isRequired('Email'),\r\n  password: isRequired('Password')\r\n});\r\n\r\nconst LoginForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        login(values).catch(error => ({\r\n          [FORM_ERROR]: error\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as='h2'\r\n            content='Login to Reactivities'\r\n            color='teal'\r\n            textAlign='center'\r\n          />\r\n          <Field name='email' component={TextInput} placeholder='Email' />\r\n          <Field\r\n            name='password'\r\n            component={TextInput}\r\n            placeholder='Password'\r\n            type='password'\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage error={submitError} text='Invalid email or password'/>\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color='teal'\r\n            content='Login'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n  username: isRequired('Username'),\r\n  displayName: isRequired('DisplayName'),\r\n  email: isRequired('Email'),\r\n  password: isRequired('Password')\r\n});\r\n\r\nconst RegisterForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { register } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        register(values).catch(error => ({      \r\n          [FORM_ERROR]: error\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as='h2'\r\n            content='Sign up to Reactivities'\r\n            color='teal'\r\n            textAlign='center'\r\n          />\r\n          <Field name='username' component={TextInput} placeholder='Username' />\r\n          <Field\r\n            name='displayName'\r\n            component={TextInput}\r\n            placeholder='Display Name'\r\n          />\r\n          <Field name='email' component={TextInput} placeholder='Email' />\r\n          <Field\r\n            name='password'\r\n            component={TextInput}\r\n            placeholder='Password'\r\n            type='password'\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage\r\n              error={submitError}\r\n            />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color='teal'\r\n            content='Register'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport {Form, Button, Header} from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\n// import ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst DemoForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) => \r\n        login({email: 'bob@test.com', password: 'Pa$$w0rd'})\r\n      }\r\n      render={({\r\n        handleSubmit,\r\n        submitting\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as='h2'\r\n            content='Login to Reactivities'\r\n            color='teal'\r\n            textAlign='center'\r\n          />\r\n          <Field name='email' defaultValue='bob@test.com' component={TextInput} placeholder='Email' />\r\n          <Field\r\n            name='password'\r\n            component={TextInput}\r\n            type='password'\r\n            defaultValue='Pa$$w0rd'\r\n          />\r\n          <Button\r\n            loading={submitting}\r\n            color='teal'\r\n            content='Login'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DemoForm;\r\n","import React, {Fragment, useContext} from \"react\";\r\nimport {Button, Container, Header, Segment, Image} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport LoginForm from \"../user/LoginForm\";\r\nimport RegisterForm from \"../user/RegisterForm\";\r\nimport DemoForm from \"../user/DemoForm\";\r\n\r\nconst HomePage = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn, user} = rootStore.userStore;\r\n    const {openModal} = rootStore.modalStore;\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image\r\n                        size='massive'\r\n                        src='/assets/logo.png'\r\n                        alt='logo'\r\n                        style={{ marginBottom: 12 }}\r\n                    />\r\n                    Reactivities\r\n                </Header>\r\n                {isLoggedIn && user ?\r\n                (<Fragment>\r\n                    <Header as='h2' inverted content={`Welcome back ${user.displayName}`} />\r\n                    <Button as={Link} to='/activities' size='huge' inverted>\r\n                        Go to activities!\r\n                    </Button>\r\n                </Fragment>) : (\r\n                        <Fragment>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button onClick={() => openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Button onClick={() => openModal(<DemoForm />)} size='huge' inverted>\r\n                                Test App\r\n                            </Button>\r\n                        </Fragment>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\n\r\nexport default HomePage","import React, {useContext} from 'react';\r\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {Link} from \"react-router-dom\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport {format} from 'date-fns';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\n\r\nconst ActivityDetailedHeader: React.FC<{activity: IActivity}> = ({activity}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {attendActivity, cancelAttendance, loading} = rootStore.activityStore;\r\n    const host = activity.attendees.filter(x => x.isHost)[0];\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                    fluid\r\n                    style={activityImageStyle}\r\n                />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`/profile/${host.username}`}> \r\n                                                <strong>Bob</strong>\r\n                                            </Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading}  onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader)","import React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\n\r\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n            <span>\r\n              {activity.venue}, {activity.city}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityDetailedInfo;\r\n","import React, {Fragment, useContext, useEffect} from 'react';\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport {Link} from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {formatDistance} from \"date-fns\";\r\n\r\nconst ActivityDetailedChat = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        createHubConnection,\r\n        stopHubConnection,\r\n        addComment,\r\n        activity\r\n    } = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        createHubConnection(activity!.id);\r\n        return () => {\r\n            stopHubConnection();\r\n        }\r\n    }, [createHubConnection, stopHubConnection])\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    {activity && activity.comments && activity.comments.map((comment) => (\r\n                    <Comment>\r\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistance(comment.createdAt, new Date())}</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n                    <FinalForm\r\n                        onSubmit={addComment}\r\n                        render={({handleSubmit, submitting, form}) => (\r\n                                <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                                    <Field\r\n                                        name='body'\r\n                                        component={TextAreaInput}\r\n                                        rows={2}\r\n                                        placeholder='Add your comment'\r\n                                    />\r\n                                    <Button\r\n                                        loading={submitting}\r\n                                        content='Add Reply'\r\n                                        labelPosition='left'\r\n                                        icon='edit'\r\n                                        primary\r\n                                    />\r\n                                </Form>\r\n                    )}\r\n                    />\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport {IAttendee} from \"../../../app/models/activity\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.isHost &&\r\n                                <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React, {useContext, useEffect} from \"react\";\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n// import {act} from \"react-dom/test-utils\";\r\n\r\ninterface DetailParams {\r\n    id: string\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({match, history}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        loadActivity(match.params.id);\r\n    }, [loadActivity, match.params.id]);\r\n\r\n    if (loadingInitial)\r\n        return <LoadingComponent content='Loading activity...' />;\r\n\r\n    if(!activity)\r\n        return <h2>Activity not found</h2>\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar attendees={activity.attendees}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetails)","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere but couldn't find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\r\n  return (\r\n    <Modal open={open} onClose={closeModal} size='mini'>\r\n      <Modal.Content>{body}</Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default observer(ModalContainer);\r\n","import React from 'react';\r\nimport {\r\n  Segment,\r\n  Item,\r\n  Header,\r\n  Button,\r\n  Grid,\r\n  Statistic,\r\n  Divider,\r\n  Reveal\r\n} from 'semantic-ui-react';\r\nimport { IProfile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n  profile: IProfile\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({profile}) => {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1'>{profile.displayName}</Header>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value='5' />\r\n            <Statistic label='Following' value='42' />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n              <Button fluid color='teal' content='Following' />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden>\r\n              <Button\r\n                fluid\r\n                basic\r\n                color={true ? 'red' : 'green'}\r\n                content={true ? 'Unfollow' : 'Follow'}\r\n              />\r\n            </Reveal.Content>\r\n          </Reveal>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfilePhotos = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n  } = rootStore.profileStore;\r\n  \r\n  return (\r\n      <Tab.Pane>\r\n        <Header floated='left' icon='image' content='Photos' />\r\n        <Card.Group itemsPerRow={5}>\r\n          {profile &&\r\n          profile.photos.map(photo => (\r\n              <Card key={photo.id}>\r\n                <Image src={photo.url} />\r\n              </Card>\r\n          ))}\r\n        </Card.Group>\r\n      </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from 'react'\r\nimport {Tab} from 'semantic-ui-react';\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\nconst panes = [\r\n    {menuItem: 'About', render: () => <Tab.Pane>About content</Tab.Pane>},\r\n    {menuItem: 'Photos', render: () => <ProfilePhotos />},\r\n    {menuItem: 'Activities', render: () => <Tab.Pane>Activities content</Tab.Pane>},\r\n    {menuItem: 'Followers', render: () => <Tab.Pane>Followers content</Tab.Pane>},\r\n    {menuItem: 'Following', render: () => <Tab.Pane>Following content</Tab.Pane>},\r\n]\r\n\r\nconst ProfileContent = () => {\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            activeIndex={1}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProfileContent\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\n// import ProfileHeader from './ProfileHeader';\r\n// import ProfileContent from './ProfileContent';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport ProfileContent from \"./ProfileContent\";\r\n\r\ninterface RouteParams {\r\n    username: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst ProfilePage: React.FC<IProps> = ({match}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {loadingProfile, profile, loadProfile} = rootStore.profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(match.params.username);\r\n    }, [loadProfile, match])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader profile={profile!} />\r\n                <ProfileContent />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage);\r\n","import React, {Fragment, useContext, useEffect} from 'react';\r\nimport {Container} from \"semantic-ui-react\";\r\nimport NavBar from \"../../features/nav/NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\n// import {act} from \"react-dom/test-utils\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Route, withRouter, RouteComponentProps, Switch} from \"react-router-dom\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport HomePage from \"../../features/home/HomePage\";\r\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\r\nimport NotFound from \"./NotFound\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport LoginForm from \"../../features/user/LoginForm\";\r\nimport {RootStoreContext} from \"../stores/rootStore\";\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\r\n\r\n\r\nconst App: React.FC<RouteComponentProps> = ({location}) =>  {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\r\n    const {getUser} = rootStore.userStore;\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            getUser().finally(() => setAppLoaded())\r\n        } else {\r\n            setAppLoaded();\r\n        }\r\n    }, [getUser, setAppLoaded, token])\r\n\r\n    if (!appLoaded)  return <LoadingComponent content='Loading app...' />\r\n    \r\n    return (\r\n        <Fragment>\r\n            <ModalContainer />\r\n            <ToastContainer position='bottom-right' />\r\n            <Route exact path='/' component={HomePage}/>\r\n            <Route path={'/(.+)'} render={() => (\r\n                <Fragment>\r\n                    <NavBar/>\r\n                    <Container style={{marginTop: '7em'}}>\r\n                        <Switch>\r\n                            <Route exact path='/activities' component={ActivityDashboard}/>\r\n                            <Route path='/activities/:id' component={ActivityDetails}/>\r\n                            <Route key={location.key} path={['/createActivity','/manage/:id', ' ']} component={ActivityForm}/>\r\n                            <Route path='/profile/:username' component={ProfilePage}/>\r\n                            <Route component={NotFound}/>\r\n                        </Switch>\r\n                    </Container>\r\n                </Fragment>\r\n            )} />\r\n          \r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(observer(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {useEffect} from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nconst ScrollToTop = ({children, location: {pathname}}: any) => {\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n    \r\n    return children;\r\n};\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport './app/layout/styles.css';\r\nimport 'react-widgets/dist/css/react-widgets.css'\r\nimport App from './app/layout/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\r\nimport dateFnsLocalizer from 'react-widgets-date-fns';\r\n\r\ndateFnsLocalizer();\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <ScrollToTop>\r\n            <App />\r\n        </ScrollToTop>\r\n    </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}